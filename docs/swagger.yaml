basePath: /api/v1
definitions:
  echo.HTTPError:
    properties:
      message: {}
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  s3.S3Object:
    properties:
      Bucket:
        type: string
      Created:
        type: string
      Deleted:
        $ref: '#/definitions/gorm.DeletedAt'
      DownloadUrl:
        type: string
      FileName:
        type: string
      FileSize:
        type: integer
      Id:
        type: integer
      Key:
        type: string
      MetaData:
        $ref: '#/definitions/s3.Tags'
      Schema:
        type: string
      SignMethod:
        type: string
      Signature:
        type: string
      Updated:
        type: string
    type: object
  s3.Tags:
    additionalProperties: {}
    type: object
  s3.listS3ObjectsData:
    properties:
      Data:
        items:
          $ref: '#/definitions/s3.S3Object'
        type: array
      Total:
        type: integer
    type: object
host: dev.netdoop.com
info:
  contact: {}
  title: S3 API
  version: "1.0"
paths:
  /s3/objects:
    get:
      consumes:
      - application/json
      operationId: list-objects
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      - default: ""
        description: Sort order
        in: query
        name: order_by
        type: string
      - default: ""
        description: Query
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of objects
          schema:
            $ref: '#/definitions/s3.listS3ObjectsData'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: List objects
      tags:
      - Objects
  /s3/objects/{bucket}/{key}:
    delete:
      consumes:
      - application/json
      operationId: delete-object
      parameters:
      - default: ""
        description: S3 objet bucket
        in: path
        name: bucket
        required: true
        type: string
      - default: ""
        description: S3 object key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Delete an object from S3
      tags:
      - Objects
    get:
      consumes:
      - application/json
      operationId: download-object
      parameters:
      - default: ""
        description: S3 objet bucket
        in: path
        name: bucket
        required: true
        type: string
      - default: ""
        description: S3 object key
        in: path
        name: key
        required: true
        type: string
      - description: Token for the object
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Empty response
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Download an object from S3
      tags:
      - Objects
    post:
      consumes:
      - multipart/form-data
      operationId: put-object
      parameters:
      - default: ""
        description: S3 objet bucket
        in: path
        name: bucket
        required: true
        type: string
      - default: ""
        description: S3 object key
        in: path
        name: key
        required: true
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Object information
          schema:
            $ref: '#/definitions/s3.S3Object'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Put an object to S3
      tags:
      - Objects
  /s3/objects/{bucket}/{key}/info:
    get:
      consumes:
      - application/json
      operationId: get-object-info
      parameters:
      - default: ""
        description: S3 objet bucket
        in: path
        name: bucket
        required: true
        type: string
      - default: ""
        description: S3 object key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Object information
          schema:
            $ref: '#/definitions/s3.S3Object'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - Bearer: []
      summary: Get information for an object from S3
      tags:
      - Objects
schemes:
- http
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
